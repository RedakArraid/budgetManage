#!/usr/bin/env python3
"""
Script de build Windows pour BudgetManage
Cr√©e un ex√©cutable Windows portable avec PyInstaller
"""

import os
import sys
import subprocess
import shutil
import platform
from pathlib import Path

def check_requirements():
    """V√©rifier que les d√©pendances sont install√©es"""
    try:
        import streamlit
        import PyInstaller
        print("‚úÖ Streamlit et PyInstaller sont install√©s")
        return True
    except ImportError as e:
        print(f"‚ùå D√©pendance manquante: {e}")
        print("Installation: pip install streamlit pyinstaller")
        return False

def create_spec_file():
    """Cr√©er le fichier .spec pour PyInstaller"""
    
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-
import os
import streamlit
from pathlib import Path

# Chemins
streamlit_path = os.path.dirname(streamlit.__file__)
project_path = os.getcwd()

a = Analysis(
    ['main.py'],
    pathex=[project_path],
    binaries=[],
    datas=[
        (os.path.join(streamlit_path, 'static'), 'streamlit/static'),
        (os.path.join(streamlit_path, 'runtime'), 'streamlit/runtime'),
        ('config', 'config'),
        ('models', 'models'),
        ('controllers', 'controllers'),
        ('services', 'services'),
        ('views', 'views'),
        ('utils', 'utils'),
        ('static', 'static'),
        ('migrations', 'migrations'),
    ],
    hiddenimports=[
        'streamlit',
        'streamlit.web.cli',
        'streamlit.runtime.scriptrunner.script_runner',
        'streamlit.runtime.state',
        'streamlit.runtime.caching',
        'validators',
        'bcrypt',
        'plotly',
        'pandas',
        'openpyxl',
        'sqlite3',
        'python-dotenv',
        'email.mime.text',
        'email.mime.multipart',
        'smtplib',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=['tkinter', 'matplotlib'],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=None,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=None)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='BudgetManage',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=True,
    disable_windowed_traceback=False,
    argv_emulation=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon='docs/icon.ico' if os.path.exists('docs/icon.ico') else None,
)
'''
    
    with open('budgetmanage.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("‚úÖ Fichier .spec cr√©√©")

def build_executable():
    """Construire l'ex√©cutable avec PyInstaller"""
    print("üèóÔ∏è Construction de l'ex√©cutable...")
    
    try:
        # Nettoyer les builds pr√©c√©dents
        if os.path.exists('build'):
            shutil.rmtree('build')
        if os.path.exists('dist'):
            shutil.rmtree('dist')
        
        # Construire
        result = subprocess.run([
            'pyinstaller', 'budgetmanage.spec', '--clean', '--noconfirm'
        ], capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Ex√©cutable cr√©√© avec succ√®s")
            return True
        else:
            print(f"‚ùå Erreur lors de la construction: {result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def create_portable_package():
    """Cr√©er le package portable"""
    print("üì¶ Cr√©ation du package portable...")
    
    # Cr√©er le dossier portable
    portable_dir = Path('BudgetManage-Portable')
    if portable_dir.exists():
        shutil.rmtree(portable_dir)
    
    portable_dir.mkdir()
    
    # Copier l'ex√©cutable
    exe_path = Path('dist/BudgetManage.exe')
    if exe_path.exists():
        shutil.copy2(exe_path, portable_dir / 'BudgetManage.exe')
        print("‚úÖ Ex√©cutable copi√©")
    else:
        print("‚ùå Ex√©cutable non trouv√©")
        return False
    
    # Cr√©er le script de d√©marrage
    start_script = portable_dir / 'start.bat'
    with open(start_script, 'w', encoding='utf-8') as f:
        f.write('''@echo off
title BudgetManage - Syst√®me de Gestion Budget
echo.
echo ==================================
echo    BUDGETMANAGE v2.0
echo    Syst√®me de Gestion Budget
echo ==================================
echo.
echo D√©marrage en cours...
echo.
echo Apr√®s d√©marrage, ouvrez votre navigateur sur:
echo.
echo    http://localhost:8501
echo.
echo Connexion par d√©faut:
echo   Email: admin@budget.com
echo   Mot de passe: admin123
echo.
echo Appuyez sur Ctrl+C pour arr√™ter l'application
echo.
BudgetManage.exe
pause
''')
    
    # Cr√©er le README
    readme_path = portable_dir / 'README.md'
    with open(readme_path, 'w', encoding='utf-8') as f:
        f.write('''# BudgetManage - Version Portable

## üöÄ D√©marrage Rapide

1. Double-cliquez sur `start.bat`
2. Attendez que l'application d√©marre
3. Ouvrez votre navigateur sur http://localhost:8501

## üîê Connexion par D√©faut

- **Email**: admin@budget.com
- **Mot de passe**: admin123

‚ö†Ô∏è **Important**: Changez le mot de passe apr√®s la premi√®re connexion !

## üìã Fonctionnalit√©s

- Gestion des demandes budg√©taires
- Workflow de validation hi√©rarchique
- Notifications automatiques
- Analytics et rapports
- Gestion des utilisateurs

## üÜò Support

- Documentation: https://github.com/RedakArraid/budgetManage
- Issues: https://github.com/RedakArraid/budgetManage/issues
''')
    
    print("‚úÖ Package portable cr√©√©")
    return True

def get_exe_info():
    """Afficher les informations sur l'ex√©cutable"""
    exe_path = Path('dist/BudgetManage.exe')
    if exe_path.exists():
        size_mb = exe_path.stat().st_size / (1024 * 1024)
        print(f"üìä Taille de l'ex√©cutable: {size_mb:.1f} MB")
        
        # Test rapide
        print("üß™ Test de l'ex√©cutable...")
        try:
            result = subprocess.run(
                [str(exe_path), '--help'], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            if result.returncode == 0:
                print("‚úÖ Ex√©cutable test√© avec succ√®s")
            else:
                print("‚ö†Ô∏è Test de l'ex√©cutable avec avertissement")
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de tester l'ex√©cutable: {e}")
    else:
        print("‚ùå Ex√©cutable non trouv√©")

def main():
    """Fonction principale"""
    print("ü™ü Build Windows BudgetManage")
    print("=" * 40)
    
    # V√©rifications
    if platform.system() != 'Windows':
        print("‚ö†Ô∏è Ce script est optimis√© pour Windows")
        print("Vous pouvez continuer, mais certaines fonctionnalit√©s peuvent ne pas marcher")
    
    if not check_requirements():
        return 1
    
    # √âtapes de build
    steps = [
        ("Cr√©ation du fichier .spec", create_spec_file),
        ("Construction de l'ex√©cutable", build_executable),
        ("Cr√©ation du package portable", create_portable_package),
        ("Informations sur l'ex√©cutable", get_exe_info),
    ]
    
    for step_name, step_func in steps:
        print(f"\nüìã {step_name}...")
        if not step_func():
            print(f"‚ùå √âchec de l'√©tape: {step_name}")
            return 1
    
    print("\nüéâ Build termin√© avec succ√®s !")
    print("üìÅ Fichiers cr√©√©s:")
    print("  - dist/BudgetManage.exe")
    print("  - BudgetManage-Portable/ (dossier complet)")
    print("\nüí° Pour distribuer: compressez le dossier BudgetManage-Portable")
    
    return 0

if __name__ == '__main__':
    exit(main())
