#!/usr/bin/env python3
"""
Script de test sp√©cifique pour l'impact sur les listes d√©roulantes
Valide que les ann√©es fiscales sont correctement g√©r√©es
"""
import sys
import os

# Ajouter le r√©pertoire du projet au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def test_dropdown_usage_count():
    """Test du comptage des usages dans les dropdowns"""
    print("üß™ Test comptage usages ann√©es fiscales...")
    
    try:
        # Import apr√®s ajout du path
        sys.path.insert(0, '/Users/kader/Desktop/projet-en-cours/budgetmanage/views')
        from admin_dropdown_options_view import _get_usage_count
        
        # Test avec une ann√©e fiscale existante (si des donn√©es existent)
        count = _get_usage_count('annee_fiscale', 'BY25')
        print(f"‚úÖ Usage BY25: {count} (type: {type(count)})")
        
        # Test avec autres cat√©gories  
        count_budget = _get_usage_count('budget', 'budget_marketing')
        print(f"‚úÖ Usage budget_marketing: {count_budget}")
        
        # Test avec cat√©gorie inexistante
        count_invalid = _get_usage_count('invalid_category', 'test')
        print(f"‚úÖ Cat√©gorie invalide: {count_invalid}")
        
        print("‚úÖ Comptage usages fonctionne")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test comptage: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_fiscal_year_normalization():
    """Test de la normalisation des ann√©es fiscales"""
    print("üß™ Test normalisation ann√©es fiscales...")
    
    try:
        from utils.dropdown_value_normalizer import (
            normalize_dropdown_value,
            is_fiscal_year_label, 
            extract_fiscal_year_code,
            preview_normalization
        )
        
        # Tests ann√©es fiscales
        test_cases = [
            ("BY25", "BY25", True),
            ("BY25 (2025)", "BY25", True), 
            ("2025", "BY25", True),
            ("Budget Marketing", "budget_marketing", False),
        ]
        
        all_passed = True
        
        for input_label, expected, is_fiscal in test_cases:
            # Test d√©tection
            detected = is_fiscal_year_label(input_label)
            
            # Test normalisation
            normalized = normalize_dropdown_value(input_label)
            
            # Test extraction si fiscal
            if is_fiscal:
                extracted = extract_fiscal_year_code(input_label)
                extracted_ok = extracted == expected
            else:
                extracted_ok = True
            
            # V√©rification
            detection_ok = detected == is_fiscal
            normalization_ok = normalized == expected
            
            if detection_ok and normalization_ok and extracted_ok:
                print(f"‚úÖ '{input_label}' ‚Üí '{normalized}' (fiscal: {detected})")
            else:
                print(f"‚ùå '{input_label}' ‚Üí '{normalized}' (attendu: '{expected}', fiscal: {detected}/{is_fiscal})")
                all_passed = False
        
        if all_passed:
            print("‚úÖ Normalisation ann√©es fiscales OK")
        else:
            print("‚ùå Probl√®mes dans la normalisation")
            
        return all_passed
        
    except Exception as e:
        print(f"‚ùå Erreur test normalisation: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_dropdown_database_integration():
    """Test de l'int√©gration avec la base de donn√©es"""
    print("üß™ Test int√©gration base de donn√©es...")
    
    try:
        from models.database import db
        
        # V√©rifier que la colonne 'by' existe
        columns = db.execute_query("PRAGMA table_info(demandes)", fetch='all')
        column_names = [col['name'] for col in columns]
        
        has_by = 'by' in column_names
        has_cy = 'cy' in column_names
        
        print(f"‚úÖ Colonne 'by' existe: {has_by}")
        print(f"‚úÖ Colonne 'cy' existe: {has_cy}")
        
        if not has_by:
            print("‚ùå Colonne 'by' manquante - migration n√©cessaire")
            return False
        
        # Tester une requ√™te de comptage
        try:
            count = db.execute_query("SELECT COUNT(*) FROM demandes WHERE by IS NOT NULL", fetch='one')[0]
            print(f"‚úÖ {count} demandes avec ann√©e fiscale 'by'")
        except Exception as e:
            print(f"‚ö†Ô∏è Erreur comptage 'by': {e}")
        
        # V√©rifier les ann√©es fiscales dans dropdown_options
        try:
            fiscal_years = db.execute_query("""
                SELECT value, label, is_active 
                FROM dropdown_options 
                WHERE category = 'annee_fiscale'
                ORDER BY order_index
            """, fetch='all')
            
            if fiscal_years:
                print(f"‚úÖ {len(fiscal_years)} ann√©es fiscales configur√©es:")
                for fy in fiscal_years:
                    status = "‚úÖ" if fy['is_active'] else "‚ùå"
                    print(f"  {status} {fy['value']} ({fy['label']})")
            else:
                print("‚ö†Ô∏è Aucune ann√©e fiscale configur√©e")
            
        except Exception as e:
            print(f"‚ùå Erreur lecture ann√©es fiscales: {e}")
        
        print("‚úÖ Int√©gration base de donn√©es OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test int√©gration BD: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_dropdown_view_functions():
    """Test des fonctions utilitaires des vues"""
    print("üß™ Test fonctions utilitaires vues...")
    
    try:
        from views.admin_dropdown_options_view import get_valid_dropdown_options, validate_dropdown_value
        
        # Test r√©cup√©ration options
        fiscal_options = get_valid_dropdown_options('annee_fiscale')
        print(f"‚úÖ {len(fiscal_options)} ann√©es fiscales r√©cup√©r√©es")
        
        if fiscal_options:
            # Test avec premi√®re option
            first_option = fiscal_options[0]
            value, label = first_option
            
            # Test validation
            is_valid = validate_dropdown_value('annee_fiscale', value)
            print(f"‚úÖ Validation '{value}': {is_valid}")
            
            if not is_valid:
                print(f"‚ùå Validation √©chou√©e pour '{value}'")
                return False
        
        # Test validation valeur inexistante
        is_invalid = validate_dropdown_value('annee_fiscale', 'INVALID_YEAR')
        if is_invalid:
            print("‚ùå Validation incorrecte - valeur invalide accept√©e")
            return False
        else:
            print("‚úÖ Validation rejette les valeurs invalides")
        
        print("‚úÖ Fonctions utilitaires vues OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test fonctions vues: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def test_migration_impact():
    """Test de l'impact de la migration"""
    print("üß™ Test impact migration...")
    
    try:
        from models.database import db
        
        # V√©rifier s'il y a encore des fiscal_year non migr√©s
        try:
            unmigrated = db.execute_query("""
                SELECT COUNT(*) FROM demandes 
                WHERE (by IS NULL OR by = '') 
                AND fiscal_year IS NOT NULL
            """, fetch='one')[0]
            
            if unmigrated > 0:
                print(f"‚ö†Ô∏è {unmigrated} demandes non migr√©es d√©tect√©es")
            else:
                print("‚úÖ Toutes les demandes sont migr√©es")
                
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de v√©rifier migration: {e}")
        
        # V√©rifier la coh√©rence des donn√©es
        try:
            coherence_check = db.execute_query("""
                SELECT 
                    COUNT(*) as total,
                    COUNT(CASE WHEN by IS NOT NULL AND by != '' THEN 1 END) as with_by,
                    COUNT(CASE WHEN cy IS NOT NULL THEN 1 END) as with_cy
                FROM demandes
            """, fetch='one')
            
            if coherence_check:
                total = coherence_check['total']
                with_by = coherence_check['with_by']
                with_cy = coherence_check['with_cy']
                
                print(f"‚úÖ Coh√©rence donn√©es:")
                print(f"  Total demandes: {total}")
                print(f"  Avec 'by': {with_by} ({with_by/total*100:.1f}%)")
                print(f"  Avec 'cy': {with_cy} ({with_cy/total*100:.1f}%)")
                
                if with_by < total * 0.8:  # Si moins de 80% ont 'by'
                    print("‚ö†Ô∏è Beaucoup de demandes sans ann√©e fiscale")
                    return False
            
        except Exception as e:
            print(f"‚ö†Ô∏è Impossible de v√©rifier coh√©rence: {e}")
        
        print("‚úÖ Impact migration OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur test migration: {e}")
        import traceback
        print(traceback.format_exc())
        return False

def run_dropdown_tests():
    """Ex√©cute tous les tests li√©s aux dropdowns"""
    print("üöÄ Tests Impact Listes D√©roulantes - Ann√©es Fiscales")
    print("=" * 60)
    
    tests = [
        ("Comptage Usages", test_dropdown_usage_count),
        ("Normalisation", test_fiscal_year_normalization),
        ("Int√©gration BD", test_dropdown_database_integration),
        ("Fonctions Vues", test_dropdown_view_functions),
        ("Impact Migration", test_migration_impact)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã Test {test_name}")
        print("-" * 40)
        try:
            success = test_func()
            results.append((test_name, success))
            if success:
                print(f"‚úÖ {test_name} R√âUSSI")
            else:
                print(f"‚ùå {test_name} √âCHOU√â")
        except Exception as e:
            print(f"üí• {test_name} ERREUR: {e}")
            results.append((test_name, False))
    
    print("\n" + "=" * 60)
    print("üìä R√âSUM√â - Tests Listes D√©roulantes")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, success in results:
        status = "‚úÖ PASS" if success else "‚ùå FAIL"
        print(f"{test_name:20} : {status}")
        if success:
            passed += 1
    
    print(f"\nR√©sultat: {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ TOUS LES TESTS DROPDOWNS PASSENT !")
        print("\n‚úÖ Les listes d√©roulantes g√®rent parfaitement les ann√©es fiscales")
        print("‚úÖ Le comptage des usages fonctionne")
        print("‚úÖ La normalisation est adapt√©e par cat√©gorie")
        print("‚úÖ L'interface admin est coh√©rente")
        return True
    else:
        print("‚ö†Ô∏è Certains tests ont √©chou√©")
        print("‚ùå V√©rifiez les erreurs ci-dessus")
        return False

if __name__ == "__main__":
    success = run_dropdown_tests()
    exit(0 if success else 1)
