"""
Vue d'administration SIMPLIFI√âE pour la gestion des listes d√©roulantes
CRUD complet avec r√©percussion directe sur les demandes
"""
import streamlit as st
import pandas as pd
from datetime import datetime
from controllers.auth_controller import AuthController
from models.dropdown_options import DropdownOptionsModel
from models.database import db

def _get_usage_count(category: str, value: str) -> int:
    """
    Obtient le nombre d'utilisations d'une valeur dans les demandes
    G√®re le mapping des cat√©gories vers les bonnes colonnes
    """
    try:
        # Mapping des cat√©gories vers les colonnes de la table demandes
        column_mapping = {
            'budget': 'budget',
            'categorie': 'categorie',
            'typologie_client': 'typologie_client',
            'groupe_groupement': 'groupe_groupement',
            'region': 'region',
            'annee_fiscale': None  # Cas sp√©cial - pas de colonne directe
        }
        
        column_name = column_mapping.get(category)
        
        if column_name is None:
            # Pour annee_fiscale, on ne peut pas compter directement
            # car il n'y a pas de colonne annee_fiscale dans demandes
            if category == 'annee_fiscale':
                # On pourrait v√©rifier fiscal_year mais c'est complexe avec la conversion
                # Pour l'instant, on retourne 0
                return 0
            else:
                return None
        
        # V√©rifier si la colonne existe dans la table demandes
        columns_info = db.execute_query("PRAGMA table_info(demandes)", fetch='all')
        existing_columns = [col['name'] for col in columns_info]
        
        if column_name not in existing_columns:
            return None
        
        # Compter les utilisations
        result = db.execute_query(f'''
            SELECT COUNT(*) FROM demandes WHERE {column_name} = ?
        ''', (value,), fetch='one')
        
        return result[0] if result else 0
        
    except Exception as e:
        print(f"Erreur _get_usage_count pour {category}={value}: {e}")
        return None

def _display_fiscal_year_assistant():
    """
    Assistant sp√©cialis√© pour la gestion des ann√©es fiscales
    Logique m√©tier: BY25 = Mai 2024 √† Avril 2025
    """
    st.markdown("### üìÖ Assistant Ann√©es Fiscales")
    st.markdown("üìù **Logique m√©tier**: BY25 = Mai 2024 √† Avril 2025 (ann√©e fiscale commence en Mai)")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("‚ú® G√©n√©rer Ann√©es Standard", use_container_width=True):
            _generate_standard_fiscal_years()
    
    with col2:
        if st.button("üóëÔ∏è Supprimer Toutes", use_container_width=True):
            _delete_all_fiscal_years()
    
    with col3:
        if st.button("üîÑ R√©initialiser", use_container_width=True):
            _reset_fiscal_years()
    
    # Ajout manuel rapide
    st.markdown("#### ‚ûï Ajout Manuel Rapide")
    
    with st.form("quick_fiscal_year_add"):
        col_year, col_add = st.columns([3, 1])
        
        with col_year:
            from datetime import datetime
            current_year = datetime.now().year
            
            start_year = st.number_input(
                "Ann√©e de d√©but de p√©riode fiscale",
                min_value=2015,
                max_value=2035,
                value=current_year,
                help="Ex: 2024 pour la p√©riode Mai 2024 - Avril 2025 (BY25)"
            )
        
        with col_add:
            st.markdown("<br>", unsafe_allow_html=True)  # Espaceur
            submitted = st.form_submit_button("‚ûï Ajouter", use_container_width=True)
        
        if submitted:
            _add_single_fiscal_year(start_year)

def _generate_standard_fiscal_years():
    """G√©n√®re les ann√©es fiscales standard (BY20 √† BY30)"""
    try:
        from utils.fiscal_year_utils import year_to_byxx, get_fiscal_year_display
        
        # G√©n√©rer les ann√©es 2019-2029 (BY20 √† BY30)
        success_count = 0
        
        for start_year in range(2019, 2030):
            byxx_code = year_to_byxx(start_year)
            label = get_fiscal_year_display(byxx_code)
            order_index = start_year - 2018  # 2019=1, 2020=2, etc.
            
            try:
                # Ajouter directement sans auto-normalisation pour les ann√©es fiscales
                db.execute_query("""
                    INSERT OR IGNORE INTO dropdown_options 
                    (category, value, label, order_index, is_active)
                    VALUES (?, ?, ?, ?, ?)
                """, ('annee_fiscale', byxx_code, label, order_index, True))
                success_count += 1
            except Exception as e:
                st.error(f"‚ùå Erreur {byxx_code}: {e}")
        
        st.success(f"‚úÖ {success_count} ann√©es fiscales g√©n√©r√©es (BY20 √† BY30)")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erreur g√©n√©ration: {e}")

def _delete_all_fiscal_years():
    """Supprime toutes les ann√©es fiscales"""
    try:
        deleted_count = db.execute_query("""
            DELETE FROM dropdown_options WHERE category = 'annee_fiscale'
        """)
        
        st.success(f"‚úÖ {deleted_count} ann√©es fiscales supprim√©es")
        st.rerun()
        
    except Exception as e:
        st.error(f"‚ùå Erreur suppression: {e}")

def _reset_fiscal_years():
    """R√©initialise compl√®tement les ann√©es fiscales"""
    try:
        # Supprimer puis reg√©n√©rer
        _delete_all_fiscal_years()
        _generate_standard_fiscal_years()
        
        st.success("‚úÖ Ann√©es fiscales r√©initialis√©es avec succ√®s!")
        
    except Exception as e:
        st.error(f"‚ùå Erreur r√©initialisation: {e}")

def _add_single_fiscal_year(start_year):
    """Ajoute une seule ann√©e fiscale"""
    try:
        from utils.fiscal_year_utils import year_to_byxx, get_fiscal_year_display
        
        byxx_code = year_to_byxx(start_year)
        label = get_fiscal_year_display(byxx_code)
        order_index = start_year - 2018
        
        # Ajouter directement sans auto-normalisation pour les ann√©es fiscales
        rows_affected = db.execute_query("""
            INSERT OR IGNORE INTO dropdown_options 
            (category, value, label, order_index, is_active)
            VALUES (?, ?, ?, ?, ?)
        """, ('annee_fiscale', byxx_code, label, order_index, True))
        
        if rows_affected > 0:
            st.success(f"‚úÖ Ann√©e ajout√©e: {label}")
            st.rerun()
        else:
            st.warning(f"‚ö†Ô∏è {byxx_code} existe d√©j√†")
            
    except Exception as e:
        st.error(f"‚ùå Erreur ajout: {e}")

@AuthController.require_role(['admin'])
def admin_dropdown_options_page():
    """Page UNIQUE de gestion des listes d√©roulantes - CRUD complet"""
    from views.components.header import display_header
    
    display_header()
    
    st.title("üéõÔ∏è Gestion des Listes D√©roulantes")
    
    # Onglets simplifi√©s
    tab1, tab2, tab3 = st.tabs([
        "üìã G√©rer les Options", 
        "‚ûï Ajouter Option",
        "üìä Impact sur les Demandes"
    ])
    
    with tab1:
        _crud_options_tab()
    
    with tab2:
        _add_option_simple_tab()
    
    with tab3:
        _impact_demandes_tab()

def _crud_options_tab():
    """Onglet CRUD complet des options avec manipulation directe de la base"""
    st.subheader("üìã CRUD des Options - Base Directe")
    
    from models.database import db
    
    # S√©lecteur de cat√©gorie
    categories = {
        'budget': 'üí∏ Budget',
        'categorie': 'üìÇ Cat√©gorie', 
        'typologie_client': 'üè∑Ô∏è Typologie Client',
        'groupe_groupement': 'üë• Groupe/Groupement',
        'region': 'üåç R√©gion',
        'annee_fiscale': 'üìÖ Ann√©e Fiscale'
    }
    
    selected_category = st.selectbox(
        "üìÇ Choisir une cat√©gorie √† g√©rer",
        options=list(categories.keys()),
        format_func=lambda x: categories[x]
    )
    
    if not selected_category:
        st.warning("Veuillez s√©lectionner une cat√©gorie")
        return
    
    st.markdown(f"### {categories[selected_category]}")
    
    # R√©cup√©ration DIRECTE depuis la base de donn√©es
    try:
        raw_options = db.execute_query('''
            SELECT id, category, value, label, order_index, is_active, 
                   created_at, updated_at
            FROM dropdown_options 
            WHERE category = ?
            ORDER BY order_index ASC, label ASC
        ''', (selected_category,), fetch='all')
        
        # Convertir en liste de dictionnaires
        options = [dict(row) for row in raw_options] if raw_options else []
        
    except Exception as e:
        st.error(f"‚ùå Erreur acc√®s base: {e}")
        return
    
    if not options:
        st.info(f"Aucune option dans {categories[selected_category]}")
        st.markdown("‚ûï Utilisez l'onglet 'Ajouter Option' pour cr√©er la premi√®re option")
        return
    
    # √âtat de la base
    st.markdown(f"**üìä {len(options)} option(s) en base** - Derni√®re actualisation: {datetime.now().strftime('%H:%M:%S')}")
    
    # Actions globales sur la base
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        if st.button("‚úÖ Activer Toutes", key=f"activate_all_{selected_category}", use_container_width=True):
            try:
                count = db.execute_query('''
                    UPDATE dropdown_options 
                    SET is_active = TRUE, updated_at = CURRENT_TIMESTAMP
                    WHERE category = ?
                ''', (selected_category,))
                st.success(f"‚úÖ {count} options activ√©es")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Erreur: {e}")
    
    with col2:
        if st.button("‚ùå D√©sactiver Toutes", key=f"deactivate_all_{selected_category}", use_container_width=True):
            try:
                count = db.execute_query('''
                    UPDATE dropdown_options 
                    SET is_active = FALSE, updated_at = CURRENT_TIMESTAMP
                    WHERE category = ?
                ''', (selected_category,))
                st.success(f"‚úÖ {count} options d√©sactiv√©es")
                st.rerun()
            except Exception as e:
                st.error(f"‚ùå Erreur: {e}")
    
    with col3:
        if st.button("üîÑ Actualiser", key=f"refresh_crud_{selected_category}", use_container_width=True):
            st.rerun()
    
    with col4:
        if st.button("üóëÔ∏è Tout Supprimer", key=f"delete_all_{selected_category}", use_container_width=True):
            if st.session_state.get(f"confirm_delete_all_{selected_category}", False):
                try:
                    count = db.execute_query('''
                        DELETE FROM dropdown_options WHERE category = ?
                    ''', (selected_category,))
                    st.success(f"‚úÖ {count} options supprim√©es")
                    del st.session_state[f"confirm_delete_all_{selected_category}"]
                    st.rerun()
                except Exception as e:
                    st.error(f"‚ùå Erreur: {e}")
            else:
                st.session_state[f"confirm_delete_all_{selected_category}"] = True
                st.warning("Cliquez encore pour confirmer la suppression TOTALE")
    
    # Tableau CRUD en temps r√©el
    st.markdown("---")
    
    # En-t√™te du tableau
    col_header = st.columns([1, 3, 2, 1, 1, 2, 2])
    with col_header[0]:
        st.markdown("**ID**")
    with col_header[1]:
        st.markdown("**Label**")
    with col_header[2]:
        st.markdown("**Valeur**")
    with col_header[3]:
        st.markdown("**Ordre**")
    with col_header[4]:
        st.markdown("**Actif**")
    with col_header[5]:
        st.markdown("**Utilisation**")
    with col_header[6]:
        st.markdown("**Actions**")
    
    st.markdown("---")
    
    # Interface sp√©cialis√©e pour les ann√©es fiscales
    if selected_category == 'annee_fiscale':
        _display_fiscal_year_assistant()
        st.markdown("---")
        st.markdown("### üöÄ Assistant Ann√©es Fiscales")
        st.info("üìù Conseil: Utilisez l'assistant ci-dessus pour g√©rer facilement les ann√©es fiscales avec la vraie logique m√©tier (BY25 = Mai 2024 - Avril 2025)")
    
    # CRUD ligne par ligne
    for option in options:
        col = st.columns([1, 3, 2, 1, 1, 2, 2])
        
        # ID
        with col[0]:
            st.text(f"#{option['id']}")
        
        # Label √©ditable
        with col[1]:
            new_label = st.text_input(
                "Label",
                value=option['label'],
                key=f"edit_label_{option['id']}",
                label_visibility="collapsed"
            )
        
        # Valeur (affichage avec auto-normalisation)
        with col[2]:
            if selected_category == 'annee_fiscale':
                # Pour les ann√©es fiscales, pas de normalisation - format BYXX attendu
                if option['value'].startswith('BY') and len(option['value']) == 4:
                    st.success(option['value'])
                else:
                    st.warning(f"{option['value']} ‚ö†Ô∏è")
                    st.caption("Attendu: format BYXX (ex: BY24)")
            else:
                # Pour les autres cat√©gories, utiliser la normalisation
                from utils.dropdown_value_normalizer import normalize_dropdown_value
                expected_value = normalize_dropdown_value(option['label'])
                if option['value'] == expected_value:
                    st.success(option['value'])
                else:
                    st.warning(f"{option['value']} ‚ö†Ô∏è")
                    st.caption(f"Attendu: {expected_value}")
        
        # Ordre √©ditable
        with col[3]:
            new_order = st.number_input(
                "Ordre",
                value=int(option['order_index']),
                min_value=1,
                key=f"edit_order_{option['id']}",
                label_visibility="collapsed"
            )
        
        # Actif √©ditable
        with col[4]:
            is_active = st.checkbox(
                "Actif",
                value=bool(option['is_active']),
                key=f"edit_active_{option['id']}",
                label_visibility="collapsed"
            )
        
        # Utilisation en base
        with col[5]:
            usage_count = _get_usage_count(selected_category, option['value'])
            if usage_count is not None:
                if usage_count > 0:
                    st.caption(f"üìä {usage_count}x")
                else:
                    st.caption("üìä 0x")
            else:
                st.caption("‚ùì")
        
        # Actions
        with col[6]:
            col_save, col_del = st.columns(2)
            
            # Bouton sauvegarder avec auto-normalisation (sauf ann√©es fiscales)
            with col_save:
                if st.button("üíæ", key=f"save_db_{option['id']}", help="Sauvegarder"):
                    try:
                        # D√©sactiver l'auto-normalisation pour les ann√©es fiscales
                        auto_normalize = selected_category != 'annee_fiscale'
                        
                        success, message = DropdownOptionsModel.update_option(
                            option_id=option['id'],
                            label=new_label,
                            order_index=new_order,
                            is_active=is_active,
                            auto_normalize_value=auto_normalize
                        )
                        
                        if success:
                            st.success("‚úÖ Sauv√©!")
                        else:
                            st.error(f"‚ùå {message}")
                        st.rerun()
                    except Exception as e:
                        st.error(f"‚ùå Erreur: {e}")
            
            # Bouton supprimer
            with col_del:
                confirm_key = f"confirm_del_db_{option['id']}"
                if st.button("üóëÔ∏è", key=f"del_db_{option['id']}", help="Supprimer de la base"):
                    if st.session_state.get(confirm_key, False):
                        try:
                            success, message = DropdownOptionsModel.delete_option(option['id'])
                            if success:
                                st.success(f"‚úÖ {message}")
                            else:
                                st.error(f"‚ùå {message}")
                            del st.session_state[confirm_key]
                            st.rerun()
                        except Exception as e:
                            st.error(f"‚ùå Erreur: {e}")
                    else:
                        st.session_state[confirm_key] = True
                        st.warning("Cliquez encore pour confirmer")
        
        st.markdown("---")

def _add_option_simple_tab():
    """Onglet d'ajout simple d'option avec auto-g√©n√©ration de valeur"""
    st.subheader("‚ûï Ajouter une Option - G√©n√©ration Automatique")
    
    from models.database import db
    from utils.dropdown_value_normalizer import normalize_dropdown_value, preview_normalization
    
    categories = {
        'budget': 'üí∏ Budget',
        'categorie': 'üìÇ Cat√©gorie', 
        'typologie_client': 'üè∑Ô∏è Typologie Client',
        'groupe_groupement': 'üë• Groupe/Groupement',
        'region': 'üåç R√©gion',
        'annee_fiscale': 'üìÖ Ann√©e Fiscale'
    }
    
    # Mode de saisie
    st.markdown("### üéõÔ∏è Mode de Saisie")
    auto_mode = st.radio(
        "Comment voulez-vous d√©finir la valeur ?",
        [
            "ü§ñ G√©n√©ration automatique (recommand√©)",
            "‚úèÔ∏è Saisie manuelle de la valeur"
        ],
        index=0,
        help="Le mode automatique g√©n√®re la valeur selon : value = replace(lower(label), espaces par _)"
    )
    
    use_auto = auto_mode.startswith("ü§ñ")
    
    with st.form("add_option_auto"):
        col1, col2 = st.columns(2)
        
        with col1:
            category = st.selectbox(
                "üìÇ Cat√©gorie*",
                options=list(categories.keys()),
                format_func=lambda x: categories[x]
            )
            
            label = st.text_input(
                "üè∑Ô∏è Label affich√©*",
                placeholder="Ex: NORD EST, ANIMATION CLIENT, SALES",
                help="Ce que l'utilisateur verra dans les formulaires"
            )
        
        with col2:
            if use_auto:
                # Mode automatique : aper√ßu en temps r√©el
                if label:
                    preview = preview_normalization(label)
                    value = preview['normalized']
                    
                    st.text_input(
                        "üîë Valeur g√©n√©r√©e automatiquement",
                        value=value,
                        disabled=True,
                        help="G√©n√©r√©e automatiquement - Non modifiable en mode auto"
                    )
                    
                    # Affichage de l'aper√ßu d√©taill√©
                    if preview['warnings']:
                        for warning in preview['warnings']:
                            st.warning(f"‚ö†Ô∏è {warning}")
                    
                    if preview['valid']:
                        st.success("‚úÖ Valeur valide")
                    else:
                        st.error("‚ùå Valeur invalide")
                else:
                    st.text_input(
                        "üîë Valeur g√©n√©r√©e automatiquement",
                        value="",
                        disabled=True,
                        help="Saisissez d'abord un label"
                    )
                    value = ""
            else:
                # Mode manuel
                suggested_value = normalize_dropdown_value(label) if label else ""
                value = st.text_input(
                    "üîë Valeur stock√©e*",
                    value=suggested_value,
                    help="Valeur unique stock√©e en base - format: minuscules_avec_underscores"
                )
            
            # Calcul automatique de l'ordre suivant
            if category:
                try:
                    max_order = db.execute_query('''
                        SELECT COALESCE(MAX(order_index), 0) + 1
                        FROM dropdown_options 
                        WHERE category = ?
                    ''', (category,), fetch='one')[0]
                except:
                    max_order = 1
            else:
                max_order = 1
            
            order_index = st.number_input(
                "üìä Position",
                min_value=1,
                value=max_order,
                help=f"Ordre d'affichage (prochain: {max_order})"
            )
        
        # Submit
        submitted = st.form_submit_button(
            f"‚úÖ {'Auto-G√©n√©rer et' if use_auto else 'Valider et'} Ins√©rer en Base",
            use_container_width=True,
            type="primary"
        )
        
        if submitted:
            if not label or not label.strip():
                st.error("‚ùå Le label est obligatoire")
            else:
                try:
                    with st.spinner("üíæ Insertion en base de donn√©es..."):
                        success, message = DropdownOptionsModel.add_option(
                            category=category,
                            label=label,
                            order_index=order_index,
                            value=value if not use_auto else None,
                            auto_normalize=use_auto
                        )
                        
                        if success:
                            st.success(f"‚úÖ {message}")
                            st.balloons()
                        else:
                            st.error(f"‚ùå {message}")
                            
                except Exception as e:
                    st.error(f"‚ùå Erreur insertion en base: {e}")

    # Section migration
    st.markdown("---")
    st.markdown("### üîÑ Migration des Valeurs Existantes")
    
    col_migration = st.columns([1, 1, 1])
    
    with col_migration[0]:
        if st.button("üîç Aper√ßu Migration", use_container_width=True):
            try:
                options = db.execute_query('''
                    SELECT id, category, value, label
                    FROM dropdown_options
                    ORDER BY category, id
                    LIMIT 10
                ''', fetch='all')
                
                if options:
                    st.markdown("**Aper√ßu des 10 premi√®res options:**")
                    for opt in options:
                        current_value = opt['value']
                        new_value = normalize_dropdown_value(opt['label'])
                        
                        if current_value != new_value:
                            st.warning(f"ID #{opt['id']}: '{opt['label']}' ‚Üí '{current_value}' ‚áí '{new_value}'")
                        else:
                            st.success(f"ID #{opt['id']}: '{opt['label']}' ‚Üí '{current_value}' ‚úÖ")
            except Exception as e:
                st.error(f"Erreur aper√ßu: {e}")
    
    with col_migration[1]:
        if st.button("üîÑ Ex√©cuter Migration", use_container_width=True):
            try:
                success, message = DropdownOptionsModel.batch_normalize_existing_values()
                if success:
                    st.success(f"‚úÖ {message}")
                else:
                    st.error(f"‚ùå {message}")
            except Exception as e:
                st.error(f"Erreur migration: {e}")
    
    with col_migration[2]:
        if st.button("üìä Statistiques", use_container_width=True):
            try:
                stats = db.execute_query('''
                    SELECT category, COUNT(*) as total
                    FROM dropdown_options
                    GROUP BY category
                    ORDER BY category
                ''', fetch='all')
                
                if stats:
                    for stat in stats:
                        st.metric(
                            f"{categories.get(stat['category'], stat['category'])}",
                            f"{stat['total']} options"
                        )
            except Exception as e:
                st.error(f"Erreur stats: {e}")

def _impact_demandes_tab():
    """Onglet montrant l'impact sur les demandes avec donn√©es en temps r√©el"""
    st.subheader("üìä Impact sur les Demandes - Donn√©es Temps R√©el")
    
    from models.database import db
    
    # Actualisation
    if st.button("üîÑ Actualiser donn√©es", use_container_width=True):
        st.rerun()
    
    st.caption(f"Derni√®re actualisation: {datetime.now().strftime('%H:%M:%S')}")
    
    # Statistiques globales
    st.markdown("### üìä Statistiques Globales")
    col1, col2, col3 = st.columns(3)
    
    with col1:
        try:
            total_options = db.execute_query(
                "SELECT COUNT(*) FROM dropdown_options WHERE is_active = 1", 
                fetch='one'
            )[0]
            st.metric("Options Actives", total_options)
        except Exception as e:
            st.metric("Options Actives", "Erreur")
    
    with col2:
        try:
            total_demandes = db.execute_query("SELECT COUNT(*) FROM demandes", fetch='one')[0]
            st.metric("Total Demandes", total_demandes)
        except Exception as e:
            st.metric("Total Demandes", "Erreur")
    
    with col3:
        try:
            # Liste des cat√©gories qui ont des colonnes dans demandes
            categories_with_columns = ['budget', 'categorie', 'typologie_client', 'groupe_groupement', 'region']
            invalid_count = 0
            
            for category in categories_with_columns:
                try:
                    # V√©rifier si la colonne existe
                    columns_info = db.execute_query("PRAGMA table_info(demandes)", fetch='all')
                    existing_columns = [col['name'] for col in columns_info]
                    
                    if category in existing_columns:
                        invalid = db.execute_query(f'''
                            SELECT COUNT(DISTINCT d.{category})
                            FROM demandes d
                            WHERE d.{category} IS NOT NULL 
                            AND d.{category} != ''
                            AND NOT EXISTS (
                                SELECT 1 FROM dropdown_options o 
                                WHERE o.category = ? AND o.value = d.{category} AND o.is_active = 1
                            )
                        ''', (category,), fetch='one')[0]
                        invalid_count += invalid
                except Exception as e:
                    print(f"Erreur v√©rification {category}: {e}")
                    pass
            
            st.metric("Valeurs Invalides", invalid_count)
        except Exception as e:
            st.metric("Valeurs Invalides", "Erreur")

# Fonctions utilitaires
def get_valid_dropdown_options(category: str):
    """R√©cup√®re les options valides pour un formulaire"""
    from models.database import db
    
    try:
        options = db.execute_query('''
            SELECT value, label FROM dropdown_options 
            WHERE category = ? AND is_active = TRUE
            ORDER BY order_index ASC, label ASC
        ''', (category,), fetch='all')
        
        return [(opt['value'], opt['label']) for opt in options] if options else []
    except Exception as e:
        print(f"Erreur get_valid_dropdown_options: {e}")
        return []

def validate_dropdown_value(category: str, value: str) -> bool:
    """Valide qu'une valeur est autoris√©e"""
    from models.database import db
    
    try:
        result = db.execute_query('''
            SELECT id FROM dropdown_options
            WHERE category = ? AND value = ? AND is_active = 1
        ''', (category, value), fetch='one')
        
        return result is not None
    except Exception as e:
        print(f"Erreur validate_dropdown_value: {e}")
        return False
