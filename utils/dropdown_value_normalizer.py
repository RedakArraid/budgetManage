"""
Utilitaire pour la normalisation des valeurs des listes d√©roulantes
G√®re la normalisation avec r√®gles sp√©ciales pour les ann√©es fiscales
"""
import re
from typing import Dict, Any

def normalize_dropdown_value(label: str) -> str:
    """
    Normalise un label en valeur pour les dropdowns
    
    R√®gles :
    - Minuscules
    - Espaces ‚Üí underscores  
    - Caract√®res sp√©ciaux ‚Üí underscores
    - Suppression accents
    - Pas de underscores multiples
    
    Exception : Les ann√©es fiscales gardent le format BYXX
    """
    if not label or not isinstance(label, str):
        return ""
    
    # Cas sp√©cial : ann√©es fiscales (format BYXX)
    if is_fiscal_year_label(label):
        return extract_fiscal_year_code(label)
    
    # Normalisation standard
    value = label.lower()
    
    # Supprimer les accents
    value = remove_accents(value)
    
    # Remplacer espaces et caract√®res sp√©ciaux par underscore
    value = re.sub(r'[^a-z0-9]+', '_', value)
    
    # Supprimer underscores multiples
    value = re.sub(r'_+', '_', value)
    
    # Nettoyer d√©but/fin
    value = value.strip('_')
    
    return value

def is_fiscal_year_label(label: str) -> bool:
    """D√©tecte si un label repr√©sente une ann√©e fiscale"""
    if not label:
        return False
    
    # Patterns pour ann√©es fiscales
    patterns = [
        r'^BY\d{2}$',           # BY25
        r'^BY\d{2}\s*\(.*\)$',  # BY25 (2025)
        r'^\d{4}$',             # 2025
        r'^20\d{2}$'            # 2025 (plus sp√©cifique)
    ]
    
    for pattern in patterns:
        if re.match(pattern, label.strip()):
            return True
    
    return False

def extract_fiscal_year_code(label: str) -> str:
    """Extrait le code BYXX d'un label d'ann√©e fiscale"""
    if not label:
        return ""
    
    label = label.strip()
    
    # Pattern BY25 direct
    match = re.match(r'^(BY\d{2})(?:\s*\(.*\))?$', label)
    if match:
        return match.group(1)
    
    # Pattern ann√©e compl√®te (2025 ‚Üí BY25)
    match = re.match(r'^(20)?(\d{2})$', label)
    if match:
        year_suffix = match.group(2)
        return f"BY{year_suffix}"
    
    # Fallback : utiliser la normalisation standard
    return normalize_dropdown_value_standard(label)

def normalize_dropdown_value_standard(label: str) -> str:
    """Normalisation standard sans cas sp√©ciaux"""
    if not label:
        return ""
    
    value = label.lower()
    value = remove_accents(value)
    value = re.sub(r'[^a-z0-9]+', '_', value)
    value = re.sub(r'_+', '_', value)
    value = value.strip('_')
    
    return value

def remove_accents(text: str) -> str:
    """Supprime les accents d'un texte"""
    accent_map = {
        '√†': 'a', '√°': 'a', '√¢': 'a', '√£': 'a', '√§': 'a', '√•': 'a',
        '√®': 'e', '√©': 'e', '√™': 'e', '√´': 'e',
        '√¨': 'i', '√≠': 'i', '√Æ': 'i', '√Ø': 'i',
        '√≤': 'o', '√≥': 'o', '√¥': 'o', '√µ': 'o', '√∂': 'o',
        '√π': 'u', '√∫': 'u', '√ª': 'u', '√º': 'u',
        '√ß': 'c', '√±': 'n',
        '√Ä': 'A', '√Å': 'A', '√Ç': 'A', '√É': 'A', '√Ñ': 'A', '√Ö': 'A',
        '√à': 'E', '√â': 'E', '√ä': 'E', '√ã': 'E',
        '√å': 'I', '√ç': 'I', '√é': 'I', '√è': 'I',
        '√í': 'O', '√ì': 'O', '√î': 'O', '√ï': 'O', '√ñ': 'O',
        '√ô': 'U', '√ö': 'U', '√õ': 'U', '√ú': 'U',
        '√á': 'C', '√ë': 'N'
    }
    
    for accented, unaccented in accent_map.items():
        text = text.replace(accented, unaccented)
    
    return text

def preview_normalization(label: str) -> Dict[str, Any]:
    """
    Pr√©visualise la normalisation d'un label
    
    Returns:
        dict: {
            'original': str,
            'normalized': str,
            'is_fiscal_year': bool,
            'valid': bool,
            'warnings': List[str]
        }
    """
    result = {
        'original': label,
        'normalized': '',
        'is_fiscal_year': False,
        'valid': False,
        'warnings': []
    }
    
    if not label or not label.strip():
        result['warnings'].append("Label vide")
        return result
    
    # D√©tecter si c'est une ann√©e fiscale
    result['is_fiscal_year'] = is_fiscal_year_label(label)
    
    # Normaliser
    result['normalized'] = normalize_dropdown_value(label)
    
    # Validations
    if len(result['normalized']) < 2:
        result['warnings'].append("Valeur trop courte (< 2 caract√®res)")
    
    if len(result['normalized']) > 50:
        result['warnings'].append("Valeur trop longue (> 50 caract√®res)")
    
    if not re.match(r'^[a-z0-9_]+$', result['normalized']):
        result['warnings'].append("Caract√®res invalides dans la valeur normalis√©e")
    
    if result['normalized'].startswith('_') or result['normalized'].endswith('_'):
        result['warnings'].append("La valeur ne devrait pas commencer/finir par _")
    
    if '__' in result['normalized']:
        result['warnings'].append("Underscores multiples d√©tect√©s")
    
    # Validation sp√©ciale pour ann√©es fiscales
    if result['is_fiscal_year']:
        if not re.match(r'^BY\d{2}$', result['normalized']):
            result['warnings'].append("Format ann√©e fiscale incorrect (attendu: BYXX)")
    
    result['valid'] = len(result['warnings']) == 0
    
    return result

def validate_normalized_value(value: str, category: str = None) -> Dict[str, Any]:
    """
    Valide une valeur normalis√©e
    
    Args:
        value: Valeur √† valider
        category: Cat√©gorie optionnelle pour validations sp√©cifiques
        
    Returns:
        dict: {
            'valid': bool,
            'errors': List[str],
            'suggestions': List[str]
        }
    """
    result = {
        'valid': True,
        'errors': [],
        'suggestions': []
    }
    
    if not value:
        result['valid'] = False
        result['errors'].append("Valeur vide")
        return result
    
    # Validations g√©n√©rales
    if not re.match(r'^[a-z0-9_]+$', value):
        result['valid'] = False
        result['errors'].append("Seuls les caract√®res a-z, 0-9 et _ sont autoris√©s")
    
    if len(value) < 2:
        result['valid'] = False
        result['errors'].append("Valeur trop courte (minimum 2 caract√®res)")
    
    if len(value) > 50:
        result['valid'] = False
        result['errors'].append("Valeur trop longue (maximum 50 caract√®res)")
    
    if value.startswith('_') or value.endswith('_'):
        result['valid'] = False
        result['errors'].append("Ne doit pas commencer/finir par _")
        result['suggestions'].append(f"Suggestion: {value.strip('_')}")
    
    if '__' in value:
        result['valid'] = False
        result['errors'].append("Underscores multiples non autoris√©s")
        result['suggestions'].append(f"Suggestion: {re.sub(r'_+', '_', value)}")
    
    # Validations sp√©cifiques par cat√©gorie
    if category == 'annee_fiscale':
        if not re.match(r'^BY\d{2}$', value):
            result['valid'] = False
            result['errors'].append("Format ann√©e fiscale incorrect (attendu: BYXX)")
    
    return result

# Tests unitaires
def test_normalization():
    """Tests pour valider la normalisation"""
    test_cases = [
        # (input, expected, is_fiscal_year)
        ("Budget Marketing", "budget_marketing", False),
        ("NORD-EST", "nord_est", False),
        ("√éle-de-France", "ile_de_france", False),
        ("BY25", "BY25", True),
        ("BY25 (2025)", "BY25", True),
        ("2025", "BY25", True),
        ("Test   Multiple    Spaces", "test_multiple_spaces", False),
        ("Caract√®res @#$% Sp√©ciaux", "caracteres_speciaux", False),
    ]
    
    print("üß™ Tests de normalisation...")
    
    for i, (input_val, expected, is_fiscal) in enumerate(test_cases, 1):
        result = normalize_dropdown_value(input_val)
        fiscal_detected = is_fiscal_year_label(input_val)
        
        print(f"Test {i}: '{input_val}'")
        print(f"  Attendu: '{expected}' (fiscal: {is_fiscal})")
        print(f"  Obtenu:  '{result}' (fiscal: {fiscal_detected})")
        
        if result == expected and fiscal_detected == is_fiscal:
            print("  ‚úÖ PASS")
        else:
            print("  ‚ùå FAIL")
        print()

if __name__ == "__main__":
    test_normalization()
