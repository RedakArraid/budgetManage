#!/usr/bin/env python3
"""
Script de v√©rification des placeholders dans BudgetManage
V√©rifie que tous les placeholders ont bien √©t√© supprim√©s
"""

import os
import re
from pathlib import Path
from datetime import datetime

def verify_placeholders():
    """V√©rifier l'√©tat des placeholders dans le projet"""
    
    project_path = Path(__file__).parent
    
    print("üîç V√âRIFICATION DES PLACEHOLDERS")
    print("=" * 50)
    print(f"üìÅ Projet: {project_path}")
    
    # Fichiers √† v√©rifier en priorit√©
    priority_files = [
        'views/nouvelle_demande_view.py',
        'views/gestion_utilisateurs_view.py',
        'views/login_view.py',
        'views/admin_create_demande_view.py',
        'views/admin_dropdown_options_view.py'
    ]
    
    # Statistiques
    total_files_checked = 0
    files_with_placeholders = 0
    total_placeholders = 0
    clean_files = 0
    
    # V√©rifier les fichiers prioritaires
    print("\nüìã FICHIERS PRIORITAIRES:")
    print("-" * 30)
    
    for file_path in priority_files:
        full_path = project_path / file_path
        
        if full_path.exists():
            placeholders = check_file_placeholders(full_path, project_path)
            total_files_checked += 1
            
            if placeholders:
                files_with_placeholders += 1
                total_placeholders += len(placeholders)
                print(f"‚ö†Ô∏è {file_path}: {len(placeholders)} placeholder(s)")
                for ph in placeholders:
                    print(f"   Ligne {ph['line']}: '{ph['text']}'")
            else:
                clean_files += 1
                print(f"‚úÖ {file_path}: Propre")
        else:
            print(f"‚ùå {file_path}: Fichier non trouv√©")
    
    # Scan complet du projet
    print(f"\nüîç SCAN COMPLET DU PROJET:")
    print("-" * 30)
    
    exclude_dirs = {'.git', '__pycache__', 'venv', '.github', 'backup_20250527_120707', 'DELETED_FILES'}
    all_placeholders = []
    
    for root, dirs, files in os.walk(project_path):
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        
        for file in files:
            if file.endswith('.py') and not file.startswith(('remove_', 'clean_', 'verify_')):
                file_path = Path(root) / file
                placeholders = check_file_placeholders(file_path, project_path)
                
                if placeholders:
                    relative_path = file_path.relative_to(project_path)
                    if str(relative_path) not in [f for f in priority_files]:
                        print(f"‚ö†Ô∏è {relative_path}: {len(placeholders)} placeholder(s)")
                        for ph in placeholders:
                            print(f"   Ligne {ph['line']}: '{ph['text']}'")
                    
                    all_placeholders.extend(placeholders)
    
    # R√©sum√© final
    print(f"\nüìä R√âSUM√â DE V√âRIFICATION:")
    print("=" * 50)
    print(f"üìÑ Fichiers v√©rifi√©s: {total_files_checked}")
    print(f"‚úÖ Fichiers propres: {clean_files}")
    print(f"‚ö†Ô∏è Fichiers avec placeholders: {files_with_placeholders}")
    print(f"üí¨ Total placeholders trouv√©s: {len(all_placeholders)}")
    
    if all_placeholders:
        print(f"\n‚ùå PROJET NON PROPRE - {len(all_placeholders)} placeholders restants")
        print("üí° Utilisez clean_placeholders.py pour les supprimer")
        return False
    else:
        print(f"\n‚úÖ PROJET PROPRE - Aucun placeholder trouv√©")
        print("üéâ Tous les formulaires ont des champs vides par d√©faut")
        return True

def check_file_placeholders(file_path, project_path):
    """V√©rifier les placeholders dans un fichier"""
    placeholders = []
    
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
            lines = content.split('\n')
            
            for line_num, line in enumerate(lines, 1):
                # Chercher les placeholders non vides
                if 'placeholder=' in line:
                    # Pattern pour capturer le contenu du placeholder
                    pattern = r'placeholder=["\']([^"\']*)["\']'
                    match = re.search(pattern, line)
                    
                    if match:
                        placeholder_text = match.group(1)
                        # Seulement les placeholders non vides
                        if placeholder_text.strip():
                            placeholders.append({
                                'line': line_num,
                                'text': placeholder_text,
                                'context': line.strip()
                            })
    
    except Exception as e:
        print(f"‚ùå Erreur lecture {file_path.relative_to(project_path)}: {e}")
    
    return placeholders

def generate_report():
    """G√©n√©rer un rapport d√©taill√© de l'√©tat des placeholders"""
    
    project_path = Path(__file__).parent
    
    print("üìä G√âN√âRATION DU RAPPORT D√âTAILL√â")
    print("=" * 50)
    
    # Cr√©er le rapport
    report_lines = []
    report_lines.append("# Rapport de V√©rification des Placeholders - BudgetManage")
    report_lines.append(f"Date: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
    report_lines.append("")
    
    # Analyser chaque fichier
    exclude_dirs = {'.git', '__pycache__', 'venv', '.github', 'backup_20250527_120707', 'DELETED_FILES'}
    
    files_analyzed = 0
    total_placeholders = 0
    
    for root, dirs, files in os.walk(project_path):
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        
        for file in files:
            if file.endswith('.py') and not file.startswith(('remove_', 'clean_', 'verify_')):
                file_path = Path(root) / file
                relative_path = file_path.relative_to(project_path)
                
                placeholders = check_file_placeholders(file_path, project_path)
                files_analyzed += 1
                
                if placeholders:
                    total_placeholders += len(placeholders)
                    report_lines.append(f"## ‚ö†Ô∏è {relative_path}")
                    report_lines.append(f"Placeholders trouv√©s: {len(placeholders)}")
                    report_lines.append("")
                    
                    for i, ph in enumerate(placeholders, 1):
                        report_lines.append(f"{i}. **Ligne {ph['line']}**: `{ph['text']}`")
                        report_lines.append(f"   - Contexte: `{ph['context']}`")
                    
                    report_lines.append("")
                else:
                    report_lines.append(f"## ‚úÖ {relative_path}")
                    report_lines.append("Aucun placeholder trouv√©")
                    report_lines.append("")
    
    # R√©sum√©
    report_lines.append("## üìä R√©sum√©")
    report_lines.append(f"- **Fichiers analys√©s**: {files_analyzed}")
    report_lines.append(f"- **Total placeholders**: {total_placeholders}")
    
    if total_placeholders == 0:
        report_lines.append("- **Statut**: ‚úÖ PROJET PROPRE")
    else:
        report_lines.append("- **Statut**: ‚ö†Ô∏è NETTOYAGE REQUIS")
    
    # Sauvegarder le rapport
    report_path = project_path / "rapport_placeholders.md"
    with open(report_path, 'w', encoding='utf-8') as f:
        f.write('\n'.join(report_lines))
    
    print(f"üìÑ Rapport sauvegard√©: {report_path}")
    return report_path, total_placeholders

def main():
    print("üîç BUDGETMANAGE - V√âRIFICATION DES PLACEHOLDERS")
    print("=" * 60)
    
    while True:
        print("\nüéØ OPTIONS DISPONIBLES:")
        print("1. V√©rification rapide")
        print("2. Rapport d√©taill√©")
        print("3. Les deux")
        print("0. Quitter")
        
        choice = input("\nVotre choix (0-3): ").strip()
        
        if choice == '1':
            is_clean = verify_placeholders()
            if is_clean:
                print("\nüéâ F√©licitations ! Le projet est propre.")
            else:
                print("\nüí° Utilisez clean_placeholders.py pour nettoyer")
        
        elif choice == '2':
            report_path, total = generate_report()
            print(f"\nüìä {total} placeholders trouv√©s au total")
            
        elif choice == '3':
            print("\nüîç √âtape 1: V√©rification rapide")
            is_clean = verify_placeholders()
            
            print("\nüìä √âtape 2: G√©n√©ration du rapport")
            report_path, total = generate_report()
            
            if is_clean:
                print("\nüéâ Le projet est parfaitement propre !")
            else:
                print(f"\nüí° {total} placeholders √† nettoyer")
        
        elif choice == '0':
            print("üëã Au revoir !")
            break
        
        else:
            print("‚ùå Choix invalide. Veuillez s√©lectionner 0-3.")

if __name__ == "__main__":
    main()
