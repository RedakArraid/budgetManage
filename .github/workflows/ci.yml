name: 🧪 CI Multi-OS Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test on ${{ matrix.os }} - Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Exclure certaines combinaisons pour optimiser
          - os: macos-latest
            python-version: '3.8'
          - os: windows-latest
            python-version: '3.8'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 📦 Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 🔧 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-mock

    - name: 🏗️ Create test database
      run: |
        python -c "
        from models.database import db
        db.init_database()
        print('✅ Base de données de test créée')
        "

    - name: 🧪 Run tests with pytest
      run: |
        python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=html

    - name: 📊 Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 🧪 Test Streamlit app startup
      run: |
        python -c "
        import subprocess
        import time
        import signal
        import os
        
        # Démarrer Streamlit en arrière-plan
        process = subprocess.Popen(['streamlit', 'run', 'main.py', '--server.port=8502'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.PIPE)
        
        # Attendre un peu
        time.sleep(10)
        
        # Tuer le processus
        if os.name == 'nt':  # Windows
            process.terminate()
        else:  # Unix/Linux/macOS
            process.send_signal(signal.SIGTERM)
        
        process.wait(timeout=5)
        print('✅ Streamlit démarre correctement')
        "

  security-scan:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔍 Run safety check
      run: |
        pip install safety
        safety check -r requirements.txt

    - name: 🔍 Run bandit security scan
      run: |
        pip install bandit
        bandit -r . -f json -o bandit-report.json || true

    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json

  notify:
    name: 📢 Notify Results
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    if: always()
    
    steps:
    - name: 📢 Notify Slack on Success
      if: needs.test.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        # curl -X POST -H 'Content-type: application/json' \
        # --data '{"text":"✅ BudgetManage: All tests passed!"}' \
        # ${{ secrets.SLACK_WEBHOOK }}

    - name: 📢 Notify Slack on Failure
      if: needs.test.result == 'failure'
      run: |
        echo "❌ Some tests failed!"
        # curl -X POST -H 'Content-type: application/json' \
        # --data '{"text":"❌ BudgetManage: Tests failed!"}' \
        # ${{ secrets.SLACK_WEBHOOK }}
