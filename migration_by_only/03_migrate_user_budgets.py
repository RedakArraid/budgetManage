#!/usr/bin/env python3
"""
Script de migration de user_budgets vers format BY uniquement
Migre de fiscal_year (int) vers by (string)
"""
import sys
import os
from datetime import datetime

# Ajouter le r√©pertoire du projet au path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

def migrate_user_budgets_to_by():
    """Migration user_budgets vers format BY"""
    print("üîÑ MIGRATION USER_BUDGETS - fiscal_year ‚Üí by")
    print("=" * 50)
    
    try:
        from models.database import db
        
        # 1. V√©rifier l'√©tat actuel
        print("üìã 1. V√âRIFICATION √âTAT ACTUEL")
        print("-" * 30)
        
        if not db.table_exists('user_budgets'):
            print("‚ùå Table user_budgets n'existe pas")
            return False
        
        # Compter budgets existants
        total_budgets = db.execute_query("SELECT COUNT(*) as count FROM user_budgets", fetch='one')['count']
        print(f"üìä Total budgets: {total_budgets}")
        
        if total_budgets == 0:
            print("‚úÖ Aucun budget √† migrer")
            return True
        
        # V√©rifier colonnes existantes
        has_fiscal_year = db.column_exists('user_budgets', 'fiscal_year')
        has_by = db.column_exists('user_budgets', 'by')
        
        print(f"üìã Colonne fiscal_year: {'‚úÖ' if has_fiscal_year else '‚ùå'}")
        print(f"üìã Colonne by: {'‚úÖ' if has_by else '‚ùå'}")
        
        # 2. Ajouter colonne by si n√©cessaire
        print(f"\nüìã 2. PR√âPARATION STRUCTURE")
        print("-" * 30)
        
        if not has_by:
            print("‚ûï Ajout colonne 'by' √† user_budgets...")
            db.execute_query("ALTER TABLE user_budgets ADD COLUMN by TEXT")
            print("‚úÖ Colonne 'by' ajout√©e")
        else:
            print("‚úÖ Colonne 'by' existe d√©j√†")
        
        # 3. Migration des donn√©es
        print(f"\nüìã 3. MIGRATION DONN√âES")
        print("-" * 30)
        
        if has_fiscal_year:
            # R√©cup√©rer budgets avec fiscal_year mais sans by
            budgets_to_migrate = db.execute_query("""
                SELECT id, user_id, fiscal_year, allocated_budget
                FROM user_budgets 
                WHERE fiscal_year IS NOT NULL 
                AND (by IS NULL OR by = '')
            """, fetch='all')
            
            if budgets_to_migrate:
                print(f"üîÑ Migration de {len(budgets_to_migrate)} budget(s)...")
                
                migrated_count = 0
                error_count = 0
                
                for budget in budgets_to_migrate:
                    try:
                        fiscal_year = budget['fiscal_year']
                        
                        # Convertir 2025 ‚Üí BY25, 2024 ‚Üí BY24
                        if fiscal_year and fiscal_year >= 1000:
                            by_value = f"BY{str(fiscal_year)[2:]}"  # 2025 ‚Üí BY25
                            
                            # Mettre √† jour
                            db.execute_query("""
                                UPDATE user_budgets 
                                SET by = ?, updated_at = CURRENT_TIMESTAMP
                                WHERE id = ?
                            """, (by_value, budget['id']))
                            
                            migrated_count += 1
                            print(f"  ‚úÖ Budget {budget['id']}: {fiscal_year} ‚Üí {by_value} (User {budget['user_id']}, {budget['allocated_budget']:,.0f}‚Ç¨)")
                        else:
                            print(f"  ‚ö†Ô∏è Budget {budget['id']}: fiscal_year invalide ({fiscal_year})")
                            error_count += 1
                            
                    except Exception as e:
                        error_count += 1
                        print(f"  ‚ùå Erreur budget {budget['id']}: {e}")
                
                print(f"\nüìä R√©sultat migration:")
                print(f"   ‚úÖ Migr√©s: {migrated_count}")
                print(f"   ‚ùå Erreurs: {error_count}")
                
            else:
                print("‚úÖ Aucun budget √† migrer (d√©j√† fait ou pas de fiscal_year)")
        
        # 4. Assurer que tous les budgets ont une ann√©e by
        print(f"\nüìã 4. VALIDATION ET NETTOYAGE")
        print("-" * 30)
        
        # Compter budgets sans by
        missing_by = db.execute_query("""
            SELECT COUNT(*) as count FROM user_budgets 
            WHERE by IS NULL OR by = ''
        """, fetch='one')['count']
        
        if missing_by > 0:
            print(f"‚ö†Ô∏è {missing_by} budget(s) sans ann√©e fiscale 'by'")
            
            # Option: assigner ann√©e par d√©faut
            from utils.fiscal_year_utils import get_default_fiscal_year
            default_by = get_default_fiscal_year()
            
            print(f"üîß Attribution ann√©e par d√©faut: {default_by}")
            db.execute_query("""
                UPDATE user_budgets 
                SET by = ?, updated_at = CURRENT_TIMESTAMP
                WHERE by IS NULL OR by = ''
            """, (default_by,))
            print(f"‚úÖ {missing_by} budget(s) mis √† jour avec {default_by}")
        
        # 5. V√©rification finale
        print(f"\nüìã 5. V√âRIFICATION FINALE")
        print("-" * 30)
        
        # Compter par ann√©e by
        by_stats = db.execute_query("""
            SELECT by, COUNT(*) as count, SUM(allocated_budget) as total_budget
            FROM user_budgets 
            WHERE by IS NOT NULL AND by != ''
            GROUP BY by 
            ORDER BY by
        """, fetch='all')
        
        if by_stats:
            print("üìä R√©partition finale par ann√©e fiscale (BY):")
            total_final_budgets = 0
            total_final_amount = 0
            
            for stat in by_stats:
                count = stat['count']
                amount = stat['total_budget'] or 0
                total_final_budgets += count
                total_final_amount += amount
                print(f"   {stat['by']}: {count} budget(s), {amount:,.0f}‚Ç¨")
            
            print(f"\nüìä TOTAUX:")
            print(f"   Budgets: {total_final_budgets}")
            print(f"   Montant: {total_final_amount:,.0f}‚Ç¨")
            
            # V√©rifier coh√©rence
            if total_final_budgets == total_budgets:
                print("‚úÖ Migration coh√©rente - tous les budgets ont une ann√©e BY")
            else:
                print(f"‚ö†Ô∏è Incoh√©rence d√©tect√©e: {total_budgets} ‚Üí {total_final_budgets}")
        
        # 6. Tester compatibilit√© avec dropdowns
        print(f"\nüìã 6. COMPATIBILIT√â DROPDOWNS")
        print("-" * 30)
        
        # V√©rifier que les ann√©es BY utilis√©es existent dans dropdown_options
        if db.table_exists('dropdown_options'):
            valid_years = db.execute_query("""
                SELECT value FROM dropdown_options 
                WHERE category = 'annee_fiscale' AND is_active = TRUE
            """, fetch='all')
            
            valid_year_values = {row['value'] for row in valid_years} if valid_years else set()
            
            used_years = db.execute_query("""
                SELECT DISTINCT by FROM user_budgets 
                WHERE by IS NOT NULL AND by != ''
            """, fetch='all')
            
            used_year_values = {row['by'] for row in used_years} if used_years else set()
            
            print(f"üìã Ann√©es valides (dropdowns): {sorted(valid_year_values)}")
            print(f"üìã Ann√©es utilis√©es (budgets): {sorted(used_year_values)}")
            
            # Ann√©es manquantes dans dropdowns
            missing_in_dropdowns = used_year_values - valid_year_values
            if missing_in_dropdowns:
                print(f"‚ö†Ô∏è Ann√©es manquantes dans dropdowns: {sorted(missing_in_dropdowns)}")
                print("üí° Suggestion: Ajouter ces ann√©es dans admin > Listes D√©roulantes")
            else:
                print("‚úÖ Toutes les ann√©es utilis√©es sont valides")
        
        print(f"\n‚úÖ Migration user_budgets termin√©e - {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur migration: {e}")
        import traceback
        traceback.print_exc()
        return False

def test_migration():
    """Tests post-migration"""
    print("\nüß™ TESTS POST-MIGRATION")
    print("-" * 30)
    
    try:
        from models.database import db
        
        # Test 1: Tous les budgets ont une ann√©e BY
        no_by = db.execute_query("""
            SELECT COUNT(*) as count FROM user_budgets 
            WHERE by IS NULL OR by = ''
        """, fetch='one')['count']
        
        if no_by == 0:
            print("‚úÖ Test 1: Tous les budgets ont une ann√©e BY")
        else:
            print(f"‚ùå Test 1: {no_by} budget(s) sans ann√©e BY")
        
        # Test 2: Format BY correct
        bad_format = db.execute_query("""
            SELECT COUNT(*) as count FROM user_budgets 
            WHERE by IS NOT NULL AND by != '' AND by NOT LIKE 'BY%'
        """, fetch='one')['count']
        
        if bad_format == 0:
            print("‚úÖ Test 2: Format BY correct pour tous les budgets")
        else:
            print(f"‚ùå Test 2: {bad_format} budget(s) avec mauvais format")
        
        # Test 3: Longueur BY
        bad_length = db.execute_query("""
            SELECT COUNT(*) as count FROM user_budgets 
            WHERE by IS NOT NULL AND by != '' AND LENGTH(by) != 4
        """, fetch='one')['count']
        
        if bad_length == 0:
            print("‚úÖ Test 3: Longueur BY correcte (4 caract√®res)")
        else:
            print(f"‚ùå Test 3: {bad_length} budget(s) avec mauvaise longueur")
        
        return no_by == 0 and bad_format == 0 and bad_length == 0
        
    except Exception as e:
        print(f"‚ùå Erreur tests: {e}")
        return False

if __name__ == "__main__":
    print("üîÑ MIGRATION USER_BUDGETS TO BY")
    print("=" * 50)
    
    # Migration
    success = migrate_user_budgets_to_by()
    
    if success:
        # Tests
        tests_ok = test_migration()
        
        print(f"\n{'='*50}")
        if tests_ok:
            print("üéâ Migration et tests r√©ussis!")
            print("Prochaine √©tape: python migration_by_only/04_update_user_budget_model.py")
        else:
            print("‚ö†Ô∏è Migration OK mais tests √©chou√©s")
            print("V√©rifiez les donn√©es avant de continuer")
    else:
        print(f"\n{'='*50}")
        print("üí• Migration √©chou√©e!")
        print("‚ùå ARR√äT - Restaurer backup si n√©cessaire")
    
    exit(0 if success and (not 'tests_ok' in locals() or tests_ok) else 1)
