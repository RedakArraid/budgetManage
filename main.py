"""
Point d'entr√©e principal de l'application BudgetManage.
Ce script configure la page Streamlit, initialise la base de donn√©es et les styles,
g√®re l'√©tat de la session utilisateur (connexion, ID utilisateur, etc.)
et route vers les diff√©rentes pages de l'application en fonction de l'√©tat de la session et du r√¥le de l'utilisateur.
Il impl√©mente une architecture MVC simple en important les contr√¥leurs et les vues n√©cessaires.
"""
import streamlit as st
import sys
import os

# Ajoute le r√©pertoire racine du projet au chemin de recherche Python.
# Cela permet d'importer des modules depuis les sous-r√©pertoires comme config, models, controllers, etc.
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

# Importe les configurations de l'application, l'objet base de donn√©es et les styles CSS.
# app_config contient les param√®tres g√©n√©raux de la page Streamlit.
# db est l'instance de la base de donn√©es SQLite.
# load_css charge les styles personnalis√©s pour l'interface.
from config.settings import app_config
from models.database import db
from static.styles import load_css

# Importe les contr√¥leurs n√©cessaires.
# Le AuthController g√®re l'authentification et les permissions des utilisateurs.
from controllers.auth_controller import AuthController

# Importe les vues n√©cessaires.
# Chaque vue correspond √† une page diff√©rente de l'application (connexion, tableau de bord).
from views.login_view import login_page
from views.dashboard_view import dashboard_page

def configure_page():
    """
    Configure les param√®tres initiaux de la page Streamlit.
    D√©finit le titre, la mise en page, l'ic√¥ne et l'√©tat initial de la barre lat√©rale.
    Ces param√®tres sont d√©finis dans le fichier de configuration config/settings.py.
    """
    st.set_page_config(
        page_title=app_config.page_title,
        layout=app_config.layout,
        page_icon=app_config.page_icon,
        initial_sidebar_state=app_config.initial_sidebar_state
    )

def initialize_app():
    """
    Initialise l'application.
    Cela inclut l'initialisation de la base de donn√©es (cr√©ation des tables si elles n'existent pas)
    et le chargement des styles CSS personnalis√©s.
    Utilise le gestionnaire de session centralis√©.
    """
    # Initialise la base de donn√©es (cr√©e le fichier .db et les tables si besoin).
    db.init_database()
    
    # Ex√©cuter les migrations n√©cessaires
    try:
        from migrations.migrate_participants import migrate_participants_table
        migrate_participants_table()
    except Exception as e:
        print(f"Avertissement: Erreur lors des migrations: {e}")

    # Charge et applique les styles CSS personnalis√©s.
    st.markdown(load_css(), unsafe_allow_html=True)

    # Inject custom CSS for sidebar background
    st.markdown(
        """
        <style>
            [data-testid="stSidebar"] {
                background-color: #000000;
            }
             /* Style for the main content area background */
            [data-testid="stAppViewContainer"] .main {
                background-color: #1a1a1a;
            }
        </style>
        """,
        unsafe_allow_html=True
    )

    # Initialise l'√©tat de session centralis√©
    from utils.session_manager import session_manager
    session_manager.init_session()

def display_sidebar():
    """
    Affiche la barre lat√©rale de navigation pour les utilisateurs authentifi√©s.
    Contient les informations de l'utilisateur connect√©, le menu de navigation
    bas√© sur le r√¥le et le bouton de d√©connexion.
    """
    # V√©rifie si l'utilisateur est connect√©. Si non, la barre lat√©rale n'est pas affich√©e.
    if not AuthController.check_session():
        return

    # Utilise le conteneur de la barre lat√©rale Streamlit.
    with st.sidebar:
        # R√©cup√®re les informations de l'utilisateur connect√© depuis la session.
        user_info = AuthController.get_current_user()

        # Affiche le nom, pr√©nom, r√¥le et r√©gion de l'utilisateur.
        st.markdown(f"""
        ### üë§ {user_info['prenom']} {user_info['nom']}
        **R√¥le:** {user_info['role']}  
        **R√©gion:** {user_info.get('region', 'N/A')}
        """)

        st.markdown("---") # Ligne s√©paratrice

        # Titre du menu de navigation.
        st.markdown("### üß≠ Navigation")

        # Construit la liste des √©l√©ments de navigation disponibles en fonction du r√¥le de l'utilisateur.
        nav_items = _get_navigation_items(user_info['role'])

        # Utiliser un ensemble pour suivre les identifiants de page et √©viter les doublons
        seen_pages = set()
        unique_nav_items = []
        for item in nav_items:
            page_id = item[2] # L'identifiant de page est le troisi√®me √©l√©ment du tuple
            if page_id not in seen_pages:
                seen_pages.add(page_id)
                unique_nav_items.append(item)

        # Affiche les boutons de navigation.
        # Chaque bouton met √† jour l'√©tat de session 'page' et relance l'application pour afficher la nouvelle page.
        from utils.session_manager import session_manager
        for icon, label, page in unique_nav_items:
            if st.button(f"{icon} {label}", use_container_width=True, key=f"nav_{page}"):
                print(f"[DEBUG] Navigation button clicked: {page}")
                session_manager.set_current_page(page)
                st.rerun()

        st.markdown("---") # Ligne s√©paratrice

        # Affiche le compteur de notifications non lues (si > 0).
        _display_notification_count()

        st.markdown("---") # Ligne s√©paratrice

        # Bouton de d√©connexion.
        # D√©connecte l'utilisateur via le AuthController et relance l'application pour revenir √† la page de connexion.
        if st.button("üö™ Se D√©connecter", use_container_width=True, type="secondary"):
            AuthController.logout(st.session_state.user_id)
            st.rerun()

def _get_navigation_items(role):
    """D√©termine la liste des pages de navigation accessibles pour un r√¥le d'utilisateur donn√©."""
    # √âl√©ments de navigation de base accessibles √† la plupart des r√¥les.
    nav_items = [
        ("üè†", "Tableau de Bord", "dashboard"),
        ("üìã", "Demandes", "demandes"),
        ("üìä", "Analytics", "analytics"),
        ("üîî", "Notifications", "notifications"),
    ]

    # Ajoute les √©l√©ments de navigation sp√©cifiques aux r√¥les.
    if role == 'admin':
        # Les administrateurs ont acc√®s √† toutes les fonctionnalit√©s admin
        nav_items.insert(1, ("‚ûï", "Nouvelle demande", "admin_create_demande"))
        nav_items.insert(2, ("üë•", "Utilisateurs", "gestion_utilisateurs"))
        nav_items.insert(3, ("üè¶Ô∏è", "Listes D√©roulantes", "admin_dropdown_options"))
        nav_items.insert(4, ("üí∞", "Gestion Budgets", "gestion_budgets"))

    if role in ['tc', 'dr', 'marketing']:
        # Les cr√©ateurs de demandes (TC, DR, Marketing) peuvent cr√©er de nouvelles demandes.
        nav_items.insert(1, ("‚ûï", "Nouvelle Demande", "nouvelle_demande"))

    if role in ['dr', 'dr_financier', 'dg']:
        # Les validateurs (DR, DR Financier, DG) ont acc√®s √† la page de validation.
        nav_items.insert(-2, ("‚úÖ", "Validations", "validations"))

    # Add Account Settings for all authenticated users
    nav_items.append(("‚öôÔ∏è", "Param√®tres du compte", "account_settings"))

    return nav_items

def _display_notification_count():
    """
    Affiche le nombre de notifications non lues pour l'utilisateur connect√© dans la barre lat√©rale.
    Cette fonction est appel√©e par display_sidebar.
    """
    try:
        # Importe le mod√®le de notification localement pour √©viter les importations circulaires si n√©cessaire.
        from models.notification import NotificationModel
        # R√©cup√®re l'ID de l'utilisateur connect√©.
        user_id = AuthController.get_current_user_id()
        # Si un utilisateur est connect√©, compte les notifications non lues.
        if user_id:
            unread_count = NotificationModel.get_unread_count(user_id)
            # Affiche le compteur si sup√©rieur √† 0.
            if unread_count > 0:
                st.markdown(f"""
                ### üîî Notifications
                **{unread_count} non lue(s)**
                """)
    except Exception:
        # Ignore les erreurs si la table notifications n'existe pas encore, par exemple.
        pass

def route_pages():
    """
    G√®re le routage vers la page appropri√©e en fonction de la valeur de l'√©tat de session.
    V√©rifie d'abord l'authentification, puis les permissions d'acc√®s √† la page demand√©e.
    Utilise le gestionnaire de session centralis√©.
    """
    from utils.session_manager import session_manager
    
    # Si l'utilisateur n'est pas connect√©, affiche la page de connexion et arr√™te le routage.
    if not session_manager.is_authenticated():
        print("[DEBUG] User not authenticated, showing login page.")
        login_page()
        return

    # R√©cup√®re la page actuelle depuis l'√©tat de session (par d√©faut : dashboard).
    page = session_manager.get_current_page()
    print(f"[DEBUG] Current page from session state: {page}")

    # V√©rifie si l'utilisateur connect√© a les permissions n√©cessaires pour acc√©der √† la page demand√©e.
    if not AuthController.can_access_page(page):
        # Si l'acc√®s est refus√©, affiche un message d'erreur, redirige vers le tableau de bord et relance.
        print(f"[DEBUG] Access denied for page: {page}. Redirecting to dashboard.")
        st.error("‚ùå Vous n'avez pas les permissions pour acc√©der √† cette page")
        session_manager.set_current_page("dashboard")
        st.rerun()
        return

    # Route vers la fonction de vue correspondante en fonction de la page demand√©e.
    # Les vues sont import√©es localement ici pour une meilleure organisation et potentiellement pour √©viter les importations circulaires.
    print(f"[DEBUG] Routing to page function for: {page}")
    if page == "dashboard":
        dashboard_page()
    elif page == "admin_create_demande":
        from views.admin_create_demande_view import admin_create_demande_page
        admin_create_demande_page()
    elif page == "nouvelle_demande":
        from views.nouvelle_demande_view import nouvelle_demande_page
        nouvelle_demande_page()
    elif page == "demandes":
        from views.demandes_view import demandes_page
        demandes_page()
    elif page == "gestion_utilisateurs":
        from views.gestion_utilisateurs_view import gestion_utilisateurs_page
        gestion_utilisateurs_page()
    elif page == "admin_dropdown_options":
        from views.admin_dropdown_options_view import admin_dropdown_options_page
        admin_dropdown_options_page()
    elif page == "validations":
        from views.validations_view import validations_page
        validations_page()
    elif page == "analytics":
        from views.analytics_view import analytics_page
        analytics_page()
    elif page == "notifications":
        from views.notifications_view import notifications_page
        notifications_page()
    elif page == "account_settings":
        from views.account_settings_view import account_settings_page
        account_settings_page()
    elif page == "gestion_budgets":
        from views.gestion_budgets_view import gestion_budgets_view
        gestion_budgets_view()
    else:
        # Si la page demand√©e n'est pas reconnue, affiche le tableau de bord par d√©faut.
        print(f"[DEBUG] Unrecognized page: {page}. Defaulting to dashboard.")
        session_manager.set_current_page("dashboard")
        dashboard_page()

def main():
    """
    Fonction principale de l'application.
    Appelle les fonctions de configuration, d'initialisation, d'affichage de la barre lat√©rale
    et de routage des pages pour lancer l'application Streamlit.
    """
    # Configure les param√®tres de la page Streamlit.
    configure_page()

    # Initialise l'application (DB, CSS, session_manager) une seule fois
    if 'initialized' not in st.session_state or not st.session_state.initialized:
        print("[DEBUG] Initializing application for the first time...")
        initialize_app()
        
        # Ex√©cuter la migration des ann√©es fiscales
        try:
            from migrations.fiscal_year_unification import migrate_fiscal_year_unification
            migrate_fiscal_year_unification()
        except Exception as e:
            print(f"Avertissement: Erreur migration ann√©es fiscales: {e}")
        
        st.session_state.initialized = True
    
    # Affiche la barre lat√©rale de navigation
    display_sidebar()

    # G√®re l'affichage de la page principale en fonction de l'√©tat de session.
    route_pages()

# Point d'entr√©e du script.
# Ex√©cute la fonction main() lorsque le script est lanc√© directement.
if __name__ == "__main__":
    main()
